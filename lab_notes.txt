
Infinite: create all the events before the simulation: simulation: check the events one by one
end of the simulation there can be packets in the queue as the T is limited
creamos los 3 arrays(arrival, departure, observer) separados sin que esten ligados unos a otros
No packet is lost, no index for packets
in the observer mirar los contadores and dequeue observer: when departure-> arrival-1


E(N) SHOULD BE AN ARRAY, ponemos p= 0.25 calculamos sumamos 0.1 calculamos E(N) y as√≠


FINITE: For finite queue we cannot create the events before
 For the finite we take the departure of the packet departure before
 have to count the packets dropped

 generated packets = arrival + dropped

 


 submission instructions:
 
Always when reporting, put your code on the appendix at the end of the code (not in the middle of the report)
 
 eceubutu allows us so that we can se what the TA's expect when they run our code
 submit files individually not in zip and tar. Prepare everything in one file


        avg_packets_in_queue = []
        sorted_list = []
        num_idle = 0
        num_arrival = 0
        num_departed = 0
        num_observers = 0
        while num_arrival < 1000 and num_departed < 1000 and num_observers < 1000:
            # We register the time of every list
            arrival = arrival_packets[num_arrival]
            observers = observer_list[num_observers]
            departed = departure_list[num_departed]
            # Conditionals
            if arrival < min(observers, departed):
                num_arrival += 1
                sorted_list.append(["A", arrival])
            elif departed < min(arrival, observers):
                num_departed += 1
                sorted_list.append(["D", departed])
            else:
                if num_arrival-num_departed == 0:
                    num_idle += 1
                else:
                    avg_packets_in_queue.append(num_arrival-num_departed)
                num_observers += 1
                sorted_list.append(["O", observers])